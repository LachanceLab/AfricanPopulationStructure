#!/usr/bin/env python3
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D
import sys 
import argparse
import pandas as pd
import numpy as np
import os

### This for purely explorative purposes. The labelling is roughly done on geographic coordinates, but


def visualize_pcs(data, outfile, pc_a=1, pc_b=2):
    """
    Visualize PCA done with plink
    :param data: df, DataFrame with eigenvectors and geographic coordinates
    :param outfile: str, where to save Figure to
    :param pc_a: int, first PC to plot
    :param pc_b: int, second PC to plot
    """
    np.random.seed(42)
    colors = np.where(
        (data.Longitude >= -16.7) & (data.Longitude <= 17) & (data.Latitude >= 2.5) & (data.Latitude <= 20), 'green', 0)
    colors = np.where((data.Longitude > 17) & (data.Latitude >= -5.0) & (data.Latitude <= 20), 'blue', colors)
    colors = np.where((data.Latitude <= -5), 'orange', colors)
    colors = np.where((data.Latitude > 15) & (data.Longitude >= 35), 'pink', colors)
    colors = np.where((data.Latitude > 27) & (data.Longitude < 15), 'red', colors)
    color_dict = {'Middle East': 'pink',
                  "West Africa": "green",
                  "East Africa": "blue",
                  "South Africa": "orange",
                  "Europe": "red"}
    data['colors'] = colors
    fig, ax = plt.subplots()
    ax.scatter(data.loc[:, f'PC{pc_a}'], data.loc[:, f'PC{pc_b}'].values, c=data.colors, alpha=0.5)
    ax.set_xlabel(f'PC{pc_a}')
    ax.set_ylabel(f'PC{pc_b}')
    legend_elements = [Line2D([0], [0], color=col, marker='o', ls='', label=pop) for pop, col in color_dict.items()]
    ax.legend(handles=legend_elements, loc='upper center', ncol=4, bbox_to_anchor=(0.5, -.14))
    fig.savefig(outfile, bbox_inches='tight')
    plt.close()


def main(argv):
    parser = argparse.ArgumentParser(description='Visualize PCA performed with plink2')
    parser.add_argument('--eigenvec', help='.eigenvec file that was generated by plink. ')
    parser.add_argument('--coords', help='file containing geographic coordinates of sample locations.')
    parser.add_argument('--plot_dir', help='Directory where to save plots')
    args = parser.parse_args()
    if args.plot_dir.endswith('/'):
        plot_dir = args.plot_dir
    else:
        plot_dir = args.plot_dir + '/'
    if not os.path.isdir(plot_dir):
        os.makedirs(plot_dir)
    eigenvectors = pd.read_csv(args.eigenvec, sep='\t')
    eigenvectors.set_index('IID', inplace=True)
    coordinates = pd.read_csv(args.coords, sep='\t', header=None, names=['FID', "IID", "Latitude", "Longitude"])
    # join
    data = eigenvectors.join(coordinates.set_index('IID'))
    outfile = plot_dir + args.eigenvec.split('/')[-1].split('.eigenvec')[0] + "_pca.png"
    visualize_pcs(data, outfile)


if __name__ == '__main__':
    main(sys.argv[1:])

